import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import api from "./../../api";
import { TodoI } from "./../../common/model/intefaces";

export interface TodoState {
  todoList: TodoI[];
  status: string;
}

const initialState: TodoState = {
  todoList: [],
  status: "idle",
};

export const addTodoApi = createAsyncThunk(
  "todo/asyncAdd",
  async (todo: string) => {
    const response = await api.post("/todo", {
      completed: false,
      todo,
    });
    console.log(response.data);
    return response.data;
  }
);

export const deleteTodoApi = createAsyncThunk(
  "todo/asyncDelete",
  async (id: string) => {
    const response = await api.delete(`/todo/${id}`);
    console.log(response.data);
    return response.data;
  }
);

export const toggleTodoApi = createAsyncThunk(
  "todo/asyncToggle",
  async (todo: TodoI) => {
    const response = await api.put(`/todo/${todo.id}`, {
      completed: !todo.completed,
    });
    console.log(response.data);
    return response.data;
  }
);

export const fetchTodoApi = createAsyncThunk("todo/fetchApi", async () => {
  const response = await api.get("/todo");
  console.log(response.data);
  return response.data;
});

export const todoSlice = createSlice({
  name: "todo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addSaga: (state, action: PayloadAction<string>) => {
      state.status = "loading";
    },
    addSagaSuccess: (state, action: PayloadAction<TodoI>) => {
      state.status = "idle";
      state.todoList.push(action.payload);
    },
    addSagaFailed: (state, action: PayloadAction<string>) => {
      state.status = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchTodoApi.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchTodoApi.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(fetchTodoApi.fulfilled, (state, action) => {
        state.todoList = action.payload;
        state.status = "idle";
      })
      .addCase(addTodoApi.pending, (state) => {
        state.status = "loading";
      })
      .addCase(addTodoApi.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(addTodoApi.fulfilled, (state, action) => {
        state.todoList.push(action.payload);
        state.status = "idle";
      })
      .addCase(deleteTodoApi.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteTodoApi.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(deleteTodoApi.fulfilled, (state, action) => {
        state.todoList = state.todoList.filter(
          (item) => item.id !== action.payload.id
        );
        state.status = "idle";
      })
      .addCase(toggleTodoApi.pending, (state) => {
        state.status = "loading";
      })
      .addCase(toggleTodoApi.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(toggleTodoApi.fulfilled, (state, action) => {
        state.todoList = state.todoList.map((item) => {
          if (item.id === action.payload.id) {
            return { ...item, completed: !item.completed };
          }
          return item;
        });
        state.status = "idle";
      });
  },
});

// export const { add_todo, toggle_complete_todo, delete_todo } =
//   todoSlice.actions;

export const { addSaga, addSagaSuccess, addSagaFailed } = todoSlice.actions;

export default todoSlice.reducer;
